今天是我坚持写题解的第 104 天！

# 方法、找规律

今天这道题可以使用扫描线来做，扫描线理解起来比较简单，但是，代码着实难写，所以，我们使用一种更容易理解的方法：找规律！

题目要求：所有矩形一起 **精确** 覆盖了某个矩形区域，可以得出以下几个结论：

- 不能出现空缺；
- 不能出现重叠；
- 所有小矩形合在一起是大矩形；

通过以上结论，我们可知，**所有小矩形的面积之和等于大矩形的面积**，所以，我们可以先找出大矩形的左下角和右上角，然后求出所有小矩形的面积之和与大矩形的面积比较，如果不相等，可以直接返回 false。

那么，是否只考虑面积相等就可以了呢？

显然不行，因为有可能正好空缺一块，且重叠一块，这样算出来的总面积也会相等，但不能做到精确覆盖，所以，我们还需要考虑其他条件。

观察下面两图，左边为完美矩形，右边为非完美矩形，在完美矩形中，**除了四个顶点之外，其它相交的点出现的次数都是偶数次**，而非完美矩形不符合这个条件，所以，我们可以检测出现一次的点的数量，并检测它们是不是正好为四个顶点。

![image-20211116103356264](https://pic.leetcode-cn.com/1637030824-LShYmA-file_1637030824480)![image-20211116104220575](https://pic.leetcode-cn.com/1637030824-ZtXhSz-file_1637030824546)

请看代码：

* java

```java
class Solution {
    public boolean isRectangleCover(int[][] rectangles) {
        // 计算每个小矩形面积是否等于大矩形面积
        // 看每个顶点出现的次数，如果最后出现一次的顶点不是四个，则说明不符合完美矩形
        int area = 0;
        Set<Integer> set = new HashSet<>();
        // 记录大矩形的左下角和右上角
        int a1 = Integer.MAX_VALUE, b1 = Integer.MAX_VALUE;
        int a2 = Integer.MIN_VALUE, b2 = Integer.MIN_VALUE;

        for (int[] rec : rectangles) {
            // 小矩形的坐标
            int x1 = rec[0];
            int y1 = rec[1];
            int x2 = rec[2];
            int y2 = rec[3];

            // 计算左下角
            if (x1 < a1 || y1 < b1) {
                a1 = x1;
                b1 = y1;
            }

            // 计算右上角
            if (x2 > a2 || y2 > b2) {
                a2 = x2;
                b2 = y2;
            }

            // 计算面积
            area += (x2 - x1) * (y2 - y1);

            // 记录每个顶点出现的次数
            record(set, x1, y1);
            record(set, x1, y2);
            record(set, x2, y1);
            record(set, x2, y2);
        }

        // 通过左下角和右上角坐标可以算出总面积
        int totalArea = (a2 - a1) * (b2 - b1);

        // 如果两个面积不相等，直接返回false
        if (area != totalArea) return false;
        
        // 四个为1的顶点正好是大矩形的四个顶点
        return set.size() == 4 && set.contains(key(a1, b1)) && set.contains(key(a1, b2)) && set.contains(key(a2, b1)) && set.contains(key(a2, b2));
    }

    private void record(Set<Integer> set, int x, int y) {
        // 记录顶点出现的次数，如果一个顶点出现偶数次，则移除
        int key = key(x, y);
        if (set.contains(key)) {
            set.remove(key);
        } else {
            set.add(key);
        }
    }

    private int key(int x, int y) {
        // 二维坐标转一维，方便比较
        // 100000007是随便取的一个大质数
        // 这里即使溢出了也没什么问题
        return x * 100000007 + y;
    }
}
```

- 时间复杂度：$O(n)$。
- 空间复杂度：$O(n)$。

运行结果如下（时间不稳定，多运行几次，有时候击败100%，有时候不是，哈哈~）：

![image-20211116104521278](https://pic.leetcode-cn.com/1637030824-RQwtZr-file_1637030824572)

# 最后

**如果对你有帮助，请点个赞吧，谢谢^^**

也可以[关注我](https://leetcode-cn.com/u/tong-zhu/)（公号：彤哥来刷题啦），每日分享题解，一起刷题，一起拿全家桶。
